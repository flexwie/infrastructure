name: 'Terraform'

on:
  push:
    branches:
    - main
    paths:
      - "terraform/**"
  pull_request:
    paths:
      - "terraform/**"
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_user_ocid: ${{ secrets.OCI_USER }}
      TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY }}
      TF_VAR_region: ${{ secrets.OCI_REGION }}
      TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT }}
      TF_VAR_private_key_path: "~/key.pem"
      AWS_ACCESS_KEY_ID: ${{ secrets.OCI_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.OCI_SECRET_KEY }}
      CLOUDFLARE_API_KEY: ${{ secrets.CF_API_KEY }}
      CLOUDFLARE_EMAIL: ${{ secrets.CF_EMAIL }}
      TF_VAR_zone_id: ${{ secrets.CF_ZONE_ID }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Write keys
      run: echo "${{ secrets.OCI_PRIVATE_KEY }}" >> ~/key.pem && mkdir -p ~/.ssh/ && echo ""${{ secrets.SSH_PUB_KEY }} >> ~/.ssh/id_rsa.pub

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Validates Terraform template
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
      
      # update pull request with terraform plan
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # catch failing tf plan
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
